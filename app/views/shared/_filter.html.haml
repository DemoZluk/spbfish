-# list_item_for p, item, cnt, options = {}
- prods = @group.try(:all_products) || @search_products || Product.with_price
%h3 Выбрать
= form_tag request.path, {remote: true, method: 'get', id: 'filter', name: 'preferences', autocomplete: 'off'} do
  - if user_signed_in?
    #price.well.well-sm
      %h4 Цена
      = text_field_tag 'minPrice', params['minPrice'], {class: 'min', placeholder: prods.min_price, data: {min: prods.min_price, current: @min_price}}
      \-
      = text_field_tag 'maxPrice', params['maxPrice'], {class: 'max', placeholder: prods.max_price, data: {max: prods.max_price, current: @max_price}}
      руб.
      .slider{data: {min: prods.min_price, max: prods.max_price}}
  #producer
    - prod_list = prods.group{producer}.order{count(id).desc}.size.to_a
    - if prod_list.any?
      %section.well.well-sm
        %h4 Производитель
        %ul
          - prod_list[0..4].each do |prdcr|
            - unless prdcr[1] == 0
              = list_item_for 'producer', prdcr[0], prdcr[1], {dsb: (prod_list.size == 1)}
        - if prod_list.size > 5
          .show_more
            %ul.body
              - prod_list.from(5).each do |prdcr|
                - unless prdcr[1] == 0
                  = list_item_for 'producer', prdcr[0], prdcr[1]
            .toggle_text.btn.btn-link.btn-sm{data: {'sub-text' => 'Скрыть'}} Ещё

  - if @group.try(:properties).try(:any?)
    - @group.properties.each do |prop|
      - if (vals = values_of(prop)).any?#.try(:sort_by) {|e| e.title.to_i}.presence
        - title = prop.title.split(',')
        %section.filter.well.well-sm{id: prop.title.mb_chars.parameterize('_')}
          %h4= title[0]
          - if vals.numerical.length > 5
            .numerical{ data: { id: prop.id } }
              %input.min{:type => "text", placeholder: vals.min_by(&:value).value, name: "r[#{prop.id}][min]", value: (params[:r].try(:[], prop.id.to_s).try(:[], 'min'))}/
              \ - 
              %input.max{:type => "text", placeholder: vals.max_by(&:value).value, name: "r[#{prop.id}][max]", value: (params[:r].try(:[], prop.id.to_s).try(:[], 'max'))}
              = title[1]
              .slider{data: {min: vals.min_by(&:value).value, max: vals.max_by(&:value).value}}
          - else
            %ul
              - v_a = vals.count('products.id').to_a
              - vals[0..4].each_with_index do |val, i|
                - unless (amt = v_a[i][1]) == 0
                  = list_item_for 'p', val, amt, {title: "#{val.title}#{title[1]}"}
            - if vals.size > 5
              .show_more
                %ul.body
                  - vals.to_a.from(5).each_with_index do |val, i|
                    - unless (amt = v_a[i+5][1]) == 0
                      = list_item_for 'p', val, amt, {title: "#{val.title}#{title[1]}"}
                .toggle_text.btn.btn-link.btn-sm{data: {'sub-text' => 'Скрыть'}} Ещё
  = submit_tag 'Применить', name: 'commit'
  = submit_tag 'Сбросить все', {name: 'reset', id: 'reset_button', type: :reset}
